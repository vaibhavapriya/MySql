**Schema (MySQL v5.7)**

    
        CREATE TABLE  customers(
          id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
          name	CHAR(30),
          email VARCHAR(30),
          address VARCHAR(60));
        ALTER TABLE customers AUTO_INCREMENT = 1;
    
        CREATE TABLE  products(
          id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
          name	CHAR(30),
          price INT UNSIGNED,
          description VARCHAR(60));
          ALTER TABLE products AUTO_INCREMENT =101;
    
         CREATE TABLE  orders(
          id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
          customer_id	INT UNSIGNED NOT NULL,
          order_date DATE,
          total_price INT UNSIGNED,
          CONSTRAINT FK_customerorder FOREIGN KEY (customer_id) REFERENCES customers(id));
          ALTER TABLE orders AUTO_INCREMENT =1001;
    
    
         INSERT INTO customers (name, email, address) VALUES
        ('vaibhav','vaibhav@gmail.com','chennai'),
        ('vaani','vaani@gmail.com','bangalore'),
        ('Ravi', 'ravi@gmail.com', 'Mumbai'),
        ('Sita', 'sita@gmail.com', 'Delhi'),
        ('viji','viji@gmail.com','chennai');
        
        INSERT INTO products (name, price, description) VALUES
        ('Apple iMAC', 245000, 'apply is very good system'),
        ('imac book big', 290000, 'big mac book'),
        ('Dell laptop new', 15000, 'its very new condition laptop'),
        ('oppo f1s', 25000, 'oppo, mobile'),
        ('Samsung Galaxy', 55000, 'Samsung mobile phone'),
        ('Product C', 15000, 'High-quality headphones'),
        ('Product A', 12000, 'Multifunctional printer');
        
        INSERT INTO orders (customer_id, order_date, total_price) VALUES
        (1, CURDATE(), 290000),  
        (2, CURDATE() - INTERVAL 15 DAY, 245000), 
        (3, CURDATE() - INTERVAL 45 DAY, 25000),  
        (4, CURDATE(), 55000), 
        (4, CURDATE() - INTERVAL 30 DAY, 54000);
    
**Update the price of Product C to 45000.**        
        UPDATE products
        SET price = 45000
        WHERE name = 'Product C';

**Add a new column discount to the products table.*        
        ALTER TABLE products
        ADD COLUMN discount INT UNSIGNED DEFAULT 0;
        
**Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.**
        CREATE TABLE order_items (
          id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
          order_id INT UNSIGNED NOT NULL,
          product_id INT UNSIGNED NOT NULL,
          quantity INT UNSIGNED DEFAULT 1,
          price INT UNSIGNED,
          CONSTRAINT FK_order FOREIGN KEY (order_id) REFERENCES orders(id),
          CONSTRAINT FK_product FOREIGN KEY (product_id) REFERENCES products(id)
        );
        
        INSERT INTO order_items (order_id, product_id, quantity, price)
        VALUES
        (1001, 101, 1, 245000),
        (1002, 102, 1, 290000),  
        (1003, 103, 1, 45000),   
        (1004, 107, 2, 55000);
    
        

---

**Query #1**

    select * from customers;

| id  | name    | email             | address   |
| --- | ------- | ----------------- | --------- |
| 1   | vaibhav | vaibhav@gmail.com | chennai   |
| 2   | vaani   | vaani@gmail.com   | bangalore |
| 3   | Ravi    | ravi@gmail.com    | Mumbai    |
| 4   | Sita    | sita@gmail.com    | Delhi     |
| 5   | viji    | viji@gmail.com    | chennai   |

---
**Query #2**

    
        select * from products;

| id  | name            | price  | description                   | discount |
| --- | --------------- | ------ | ----------------------------- | -------- |
| 101 | Apple iMAC      | 245000 | apply is very good system     | 0        |
| 102 | imac book big   | 290000 | big mac book                  | 0        |
| 103 | Dell laptop new | 15000  | its very new condition laptop | 0        |
| 104 | oppo f1s        | 25000  | oppo, mobile                  | 0        |
| 105 | Samsung Galaxy  | 55000  | Samsung mobile phone          | 0        |
| 106 | Product C       | 45000  | High-quality headphones       | 0        |
| 107 | Product A       | 12000  | Multifunctional printer       | 0        |

---
**Query #3**

    
        select * from orders;

| id   | customer_id | order_date | total_price |
| ---- | ----------- | ---------- | ----------- |
| 1001 | 1           | 2024-11-28 | 290000      |
| 1002 | 2           | 2024-11-13 | 245000      |
| 1003 | 3           | 2024-10-14 | 25000       |
| 1004 | 4           | 2024-11-28 | 55000       |
| 1005 | 4           | 2024-10-29 | 54000       |

---
**Query #4 Retrieve all customers who have placed an order in the last 30 days. **

    
    
        SELECT customers.*
        FROM customers
        JOIN orders ON customers.id = orders.customer_id
        WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

| id  | name    | email             | address   |
| --- | ------- | ----------------- | --------- |
| 1   | vaibhav | vaibhav@gmail.com | chennai   |
| 2   | vaani   | vaani@gmail.com   | bangalore |
| 4   | Sita    | sita@gmail.com    | Delhi     |
| 4   | Sita    | sita@gmail.com    | Delhi     |

---
**Query #5 Get the total amount of all orders placed by each customer.**

    
    
        SELECT customers.name, SUM(orders.total_price) AS total_spent
        FROM customers
        JOIN orders ON customers.id = orders.customer_id
        GROUP BY customers.name;

| name    | total_spent |
| ------- | ----------- |
| Ravi    | 25000       |
| Sita    | 109000      |
| vaani   | 245000      |
| vaibhav | 290000      |

---
**Query #6 Retrieve the top 3 products with the highest price.
**

    
    
        SELECT *
        FROM products
        ORDER BY price DESC
        LIMIT 3;

| id  | name           | price  | description               | discount |
| --- | -------------- | ------ | ------------------------- | -------- |
| 102 | imac book big  | 290000 | big mac book              | 0        |
| 101 | Apple iMAC     | 245000 | apply is very good system | 0        |
| 105 | Samsung Galaxy | 55000  | Samsung mobile phone      | 0        |

---
**Query #7 Get the names of customers who have ordered Product A.
**

    
    
        SELECT DISTINCT customers.name
        FROM customers
        JOIN orders ON customers.id = orders.customer_id
        JOIN order_items ON orders.id = order_items.order_id
        JOIN products ON order_items.product_id = products.id 
        WHERE products.name = 'Product A';

| name |
| ---- |
| Sita |


---
**Query #8 oin the orders and customers tables to retrieve the customer's name and order date for each order. 
**

    
    
    
        SELECT customers.name, orders.order_date
        FROM customers
        JOIN orders ON customers.id = orders.customer_id;

| name    | order_date |
| ------- | ---------- |
| vaibhav | 2024-11-28 |
| vaani   | 2024-11-13 |
| Ravi    | 2024-10-14 |
| Sita    | 2024-11-28 |
| Sita    | 2024-10-29 |

---
**Query #9 Retrieve the orders with a total amount greater than 150.00.**

    
    
        SELECT *
        FROM orders
        WHERE total_price > 150.00;

| id   | customer_id | order_date | total_price |
| ---- | ----------- | ---------- | ----------- |
| 1001 | 1           | 2024-11-28 | 290000      |
| 1002 | 2           | 2024-11-13 | 245000      |
| 1003 | 3           | 2024-10-14 | 25000       |
| 1004 | 4           | 2024-11-28 | 55000       |
| 1005 | 4           | 2024-10-29 | 54000       |

---
**Query #10 Retrieve the average total of all orders.**

    
    
        SELECT AVG(total_price) AS average_order_price
        FROM orders;

| average_order_price |
| ------------------- |
| 133800.0000         |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/3vgGa5HgxpTcQPMrkTVGjj/0)